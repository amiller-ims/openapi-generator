{{>partial_header}}
using System;
using System.Collections.Generic;
{{#operationResultTask}}
using System.Threading.Tasks;
{{/operationResultTask}}
using Microsoft.AspNetCore.Mvc;
{{#useSwashbuckle}}
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
{{/useSwashbuckle}}
{{^isLibrary}}
using Newtonsoft.Json;
{{/isLibrary}}
using System.ComponentModel.DataAnnotations;
using {{packageName}}.Attributes;
using Microsoft.AspNetCore.Authorization;
using {{modelPackage}};

namespace {{apiPackage}}
{ {{#operations}}
    /// <summary>
    /// </summary>
    [ApiController]
    public {{#classModifier}}{{classModifier}} {{/classModifier}}class {{classname}}Controller : ControllerBase
    { {{#operation}}
        /// <summary>
        /// {{#summary}}{{summary}}{{/summary}}
        /// </summary>{{#notes}}
        /// <remarks>{{& notes}}</remarks>{{/notes}}{{#allParams}}
        /// <param name="{{paramName}}">{{description}}</param>{{/allParams}}{{#responses}}{{^wildcard}}
        /// <response code="{{code}}">{{& message}}</response>{{/wildcard}}{{/responses}}
        [{{httpMethod}}]
        [Route("{{{basePathWithoutHost}}}{{{path}}}")]{{#hasConsumes}}
        [Consumes({{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}})]{{/hasConsumes}}{{#hasProduces}}
        [Produces({{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}})]{{/hasProduces}}{{#hasAuthMethods}}{{#authMethods}}{{#isApiKey}}
        [Authorize(Policy = "{{name}}")]{{/isApiKey}}{{#isBasicBearer}}
        [Authorize{{#hasScopes}}(Roles = "{{#scopes}}{{scope}}{{#hasMore}},{{/hasMore}}{{/scopes}}"){{/hasScopes}}]{{/isBasicBearer}}{{/authMethods}}{{/hasAuthMethods}}
        [ValidateModelState]{{#useSwashbuckle}}
        [SwaggerOperation(OperationId = "{{operationIdOriginal}}")]{{#responses}}{{#dataType}}{{^wildcard}}
        [SwaggerResponse(statusCode: {{code}}, type: typeof({{&dataType}}), description: "{{& message}}")]{{/wildcard}}{{/dataType}}{{^dataType}}{{^wildcard}}
        [SwaggerResponse(statusCode: {{code}}, description: "{{& message}}")]{{/wildcard}}{{/dataType}}{{/responses}}{{/useSwashbuckle}}{{^useSwashbuckle}}{{#responses}}{{#dataType}}
        [ProducesResponseType(statusCode: {{code}}, type: typeof({{&dataType}}))]{{/dataType}}{{^dataType}}{{/dataType}}{{/responses}}{{/useSwashbuckle}}{{#responses}}{{#wildcard}}
        [ProducesDefaultResponseType{{#dataType}}(typeof({{&dataType}})){{/dataType}}]{{/wildcard}}{{/responses}}
        public {{operationModifier}} {{#operationResultTask}}{{#operationIsAsync}}async {{/operationIsAsync}}Task<{{/operationResultTask}}IActionResult{{#operationResultTask}}>{{/operationResultTask}} {{operationId}}({{#allParams}}{{>pathParam}}{{>queryParam}}{{>bodyParam}}{{>formParam}}{{>headerParam}}{{#hasMore}}{{^isCookieParam}}, {{/isCookieParam}}{{/hasMore}}{{/allParams}}){{^generateBody}};{{/generateBody}}
        {{#generateBody}}
        { 
	    {{#cookieParams}} 
            var {{paramName}} = Request.Cookies["{{paramName}}"];
            {{/cookieParams}}
{{#responses}}{{^wildcard}}
{{#dataType}}
            //TODO: Uncomment the next line to return response {{code}} or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode({{code}}, default({{&dataType}}));
{{/dataType}}
{{^dataType}}
            //TODO: Uncomment the next line to return response {{code}} or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode({{code}});
{{/dataType}}
{{/wildcard}}{{/responses}}
{{#returnType}}
            string exampleJson = null;
            {{#examples}}
            exampleJson = "{{{example}}}";
            {{/examples}}
            {{#isListCollection}}{{>listReturn}}{{/isListCollection}}{{^isListCollection}}{{#isMapContainer}}{{>mapReturn}}{{/isMapContainer}}{{^isMapContainer}}{{>objectReturn}}{{/isMapContainer}}{{/isListCollection}}
            {{!TODO: defaultResponse, examples, auth, nickname, externalDocs, imports, security}}
            //TODO: Change the data returned
            return {{#operationResultTask}}Task.FromResult<IActionResult>({{/operationResultTask}}new ObjectResult(example){{#operationResultTask}}){{/operationResultTask}};{{/returnType}}{{^returnType}}
            throw new NotImplementedException();{{/returnType}}
        }
        {{/generateBody}}
        {{/operation}}
    }
{{/operations}}
}
