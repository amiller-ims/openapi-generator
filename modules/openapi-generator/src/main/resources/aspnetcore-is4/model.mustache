{{>partial_header}}
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

{{#models}}
{{#model}}
namespace {{modelPackage}}
{ {{#isEnum}}{{>enumClass}}{{/isEnum}}{{^isEnum}}
    /// <summary>
    /// {{& description}}
    /// </summary>
    [DataContract]
    public {{#modelClassModifier}}{{modelClassModifier}} {{/modelClassModifier}}class {{classname}} : IEquatable<{{classname}}>
    { 
        /// <summary>
        /// Default constructor for {{classname}}
        /// </summary>
        public {{classname}}()
        { {{#vars}}{{#defaultValue}}
            {{name}} = {{&defaultValue}};{{/defaultValue}}{{/vars}}
        }
        {{#vars}}{{#isEnum}}{{>enumClass}}{{/isEnum}}{{#items.isEnum}}{{#items}}{{>enumClass}}{{/items}}{{/items.isEnum}}
        /// <summary>
        /// {{^description}}Gets or Sets {{{name}}}{{/description}}{{#description}}{{& description}}{{/description}}
        /// </summary>
        {{#required}}
        [Required]
        {{/required}}
        {{#pattern}}
        [RegularExpression("{{{pattern}}}")]
        {{/pattern}}
        [DataMember(Name="{{baseName}}", EmitDefaultValue={{#isNullable}}true{{/isNullable}}{{^isNullable}}false{{/isNullable}})]
        {{#isEnum}}
        public {{{datatypeWithEnum}}}{{#isEnum}}{{^isContainer}}?{{/isContainer}}{{/isEnum}} {{name}} { get; set; }
        {{/isEnum}}
        {{^isEnum}}
        public {{{dataType}}} {{name}} { get; {{#isReadOnly}}private {{/isReadOnly}}set; }
        {{/isEnum}}
        {{#hasMore}}
        {{/hasMore}}
        {{/vars}}

        {{#parent}}
        /// <summary>
        /// Additional properties of the object
        /// </summary>
        [JsonExtensionData]
        public {{{parent}}} AdditionalProperties { get; set; }
        {{/parent}}

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class {{classname}} {\n");
            {{#vars}}
            sb.Append("  {{name}}: ").Append({{name}}).Append("\n");
            {{/vars}}{{#parent}}
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            {{/parent}}
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public {{#parent}}{{^isMapModel}}{{^isArrayModel}}new {{/isArrayModel}}{{/isMapModel}}{{/parent}}string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        
        #region Equality Operations

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals(({{classname}}) obj);
        }

        /// <summary>
        /// Returns true if {{classname}} instances are equal
        /// </summary>
        /// <param name="other">Instance of {{classname}} to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals({{classname}} other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return {{#vars}}{{^isContainer}}
                (
                    {{name}} == other.{{name}} ||
                    {{^vendorExtensions.isValueType}}{{name}} != null &&{{/vendorExtensions.isValueType}}
                    {{name}}.Equals(other.{{name}})
                ){{#hasMore}} && {{/hasMore}}{{/isContainer}}{{#isContainer}}
                (
                    {{name}} == other.{{name}} ||
                    {{^vendorExtensions.isValueType}}{{name}} != null &&
                    other.{{name}} != null &&
                    {{/vendorExtensions.isValueType}}{{name}}.SequenceEqual(other.{{name}})
                ){{#hasMore}} && {{/hasMore}}{{/isContainer}}{{/vars}}{{^vars}}false{{/vars}}{{^parent}};{{/parent}}{{#parent}} &&
                (
                    AdditionalProperties == other.AdditionalProperties ||
                    AdditionalProperties != null &&
                    other.AdditionalProperties != null &&
                    AdditionalProperties.SequenceEqual(other.AdditionalProperties)
                );{{/parent}}
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                {{#vars}}
                {{^vendorExtensions.isValueType}}if ({{name}} != null)
		    {{/vendorExtensions.isValueType}}        hashCode = hashCode * 59 + {{name}}.GetHashCode();
                {{/vars}}{{#parent}}if (AdditionalProperties != null)
                    hashCode = hashCode * 59 + AdditionalProperties.GetHashCode();
                {{/parent}}
                return hashCode;
            }
        }

        /// <summary>
        /// Override == operator
        /// </summary>
        public static bool operator ==({{classname}} left, {{classname}} right)
        {
            return Equals(left, right);
        }

        /// <summary>
        /// Override != operator
        /// </summary>
        public static bool operator !=({{classname}} left, {{classname}} right)
        {
            return !Equals(left, right);
        }

        #endregion Equality Operators
    }
{{/isEnum}}
{{/model}}
{{/models}}
}
