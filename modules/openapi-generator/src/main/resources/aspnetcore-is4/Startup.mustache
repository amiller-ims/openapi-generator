{{>partial_header}}
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;{{#authMethods}}{{{#isOAuth}}}
using IdentityServer4.Quickstart.UI;{{/authMethods}}{{{/isOAuth}}}
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;{{#useSwashbuckle}}
using Swashbuckle.AspNetCore.Swagger;
using Swashbuckle.AspNetCore.SwaggerGen;
using {{packageName}}.Filters;{{/useSwashbuckle}}

namespace {{packageName}}
{
    /// <summary>
    /// Startup
    /// </summary>
    public class Startup
    {
        /// <summary>
        /// Constructor
        /// </summary>
        public Startup(IConfiguration configuration, IHostingEnvironment environment)
        {
            Configuration = configuration;
            Environment = environment;
        }

        /// <summary>
        /// The application configuration.
        /// </summary>
        public IConfiguration Configuration { get; }

        /// <summary>
        /// The hosting environment.
        /// </summary>
        public IHostingEnvironment Environment { get; }

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        public void ConfigureServices(IServiceCollection services)
        {
            // Add framework services.
            services
                .AddMvc()
                {{#compatibilityVersion}}
                .SetCompatibilityVersion(CompatibilityVersion.{{compatibilityVersion}})
                {{/compatibilityVersion}}
                .AddJsonOptions(opts =>
                {
                    opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
                    opts.SerializerSettings.Converters.Add(new StringEnumConverter
                    {
                        CamelCaseText = true
                    });
                });
            {{#authMethods}}{{{#isOAuth}}}
            services.Configure<IISOptions>(options =>
            {
                options.AutomaticAuthentication = false;
                options.AuthenticationDisplayName = "Windows";
            });

			var builder = services.AddIdentityServer(options =>
            {
                options.Events.RaiseErrorEvents = true;
                options.Events.RaiseInformationEvents = true;
                options.Events.RaiseFailureEvents = true;
                options.Events.RaiseSuccessEvents = true;
            })
                .AddTestUsers(TestUsers.Users);

            builder.AddInMemoryIdentityResources(Config.GetIdentityResources());
            builder.AddInMemoryApiResources(Config.GetApis());
            builder.AddInMemoryClients(Config.GetClients());

            if (Environment.IsDevelopment())
            {
                builder.AddDeveloperSigningCredential();
            }
            else
            {
                throw new Exception("need to configure key material");
            }

            services.AddAuthentication()
                .AddIdentityServerAuthentication(options => { options.Authority = "https://localhost:44305"; });
            {{/authMethods}}{{{#isOAuth}}}
            {{#useSwashbuckle}}
            services
                .AddSwaggerGen(c =>
                {
                    c.SwaggerDoc("{{#version}}{{{version}}}{{/version}}{{^version}}v1{{/version}}", new Info
                    {
                        Version = "{{#version}}{{{version}}}{{/version}}{{^version}}v1{{/version}}",
                        Title = "{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}}",
                        Description = "{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}} (ASP.NET Core 2.0)",
                        Contact = new Contact()
                        {
                           Name = "{{#infoName}}{{{infoName}}}{{/infoName}}{{^infoName}}OpenAPI-Generator Contributors{{/infoName}}",
                           Url = "{{#infoUrl}}{{{infoUrl}}}{{/infoUrl}}{{^infoUrl}}https://github.com/openapitools/openapi-generator{{/infoUrl}}",
                           Email = "{{#infoEmail}}{{{infoEmail}}}{{/infoEmail}}"
                        },
                        TermsOfService = "{{#termsOfService}}{{{termsOfService}}}{{/termsOfService}}"
                    });
                    c.CustomSchemaIds(type => type.FriendlyId(true));
                    c.DescribeAllEnumsAsStrings();
                    c.IncludeXmlComments($"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{Assembly.GetEntryAssembly()?.GetName().Name}.xml");
                    {{#basePathWithoutHost}}
                    // Sets the basePath property in the Swagger document generated
                    c.DocumentFilter<BasePathFilter>("{{{basePathWithoutHost}}}");
                    {{/basePathWithoutHost}}

                    // Include DataAnnotation attributes on Controller Action parameters as Swagger validation rules (e.g required, pattern, ..)
                    // Use [ValidateModelState] on Actions to actually validate it in C# as well!
                    c.OperationFilter<GeneratePathParamsValidationFilter>();{{#authMethods}}{{#isOAuth}}

                    // All the controllers in this sample platform require authorization. This 
                    // SecurityDefinition will use validate the user is registered, then request
                    // an access token from the TokenUrl.
                    c.AddSecurityDefinition("oauth2", new OAuth2Scheme
                    {
                        TokenUrl = "/connect/token",
                        Type = "oauth2",
                        Flow = "password" {{#scopes}}{{#-first}},
                        Scopes = new Dictionary<string, string> 
                        { {{/-first}}
                            {"{{scope}}", "{{{description}}}"}{{#hasMore}},{{/hasMore}}{{#-last}}
                        } {{/-last}}{{/scopes}}
                    });{{#scopes}}{{#-first}}

                    // All the controllers in this sample require specific scopes. This 
                    // SecurityRequirement will allow the user to select the scopes they
                    // want to test with.
                    c.AddSecurityRequirement(new Dictionary<string, IEnumerable<string>>
                    {
                        { 
                            "oauth2", 
                            new []
                            { {{/-first}}
                                "{{scope}}"{{#hasMore}},{{/hasMore}}{{#-last}}
                            }
                        }
                    });{{/-last}}{{/scopes}}{{/isOAuth}}{{/authMethods}}
                });
            {{/useSwashbuckle}}
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        /// </summary>
        public void Configure(IApplicationBuilder app)
        {
            if (Environment.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app {{#authMethods}}{{#isOAuth}}
                .UseIdentityServer(){{/isOAuth}}{{/authMethods}}
                .UseStaticFiles()
                .UseMvcWithDefaultRoute(){{#useSwashbuckle}}
                .UseSwagger(c =>
                {
                    c.RouteTemplate = "swagger/{documentName}/openapi.json";
                })
                .UseSwaggerUI(c =>
                {
                    //TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)
                    c.SwaggerEndpoint("/swagger/{{#version}}{{{version}}}{{/version}}{{^version}}v1{{/version}}/openapi.json", "{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}}");

                    //TODO: Or alternatively use the original Swagger contract that's included in the static files
                    // c.SwaggerEndpoint("/openapi-original.json", "{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}} Original");{{#authMethods}}{{#isOAuth}}

                    // Tell Swagger UI what client credentials to use
                    c.OAuthClientId("swagger");
                    c.OAuthClientSecret("secret");{{/isOAuth}}{{/authMethods}}
                }){{/useSwashbuckle}};
        }
    }
}
